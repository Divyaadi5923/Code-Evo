{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNI27Fd5YAZovVGglJZj03b"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"source":["# Import necessary libraries\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","from xgboost import XGBRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","data = pd.read_csv('/content/winequalityN.csv')\n","\n","# Check the first few rows of the dataset\n","print(data.head())\n","\n","# Check for missing values\n","print(data.isnull().sum())\n","\n","# Iterate through all columns except 'type'\n","for col in data.columns:\n","    if col != 'type':\n","        for wine_type in data['type'].unique():\n","            data.loc[data['type'] == wine_type, col] = data.loc[data['type'] == wine_type, col].fillna(data.loc[data['type'] == wine_type, col].median())\n","\n","# Preprocessing - Encode 'type' column if it exists (e.g., 'red'/'white')\n","if 'type' in data.columns:\n","    data['type'] = pd.get_dummies(data['type'], drop_first=True)\n","\n","# Split features and target (assuming 'quality' is the target)\n","X = data.drop('quality', axis=1)\n","y = data['quality']\n","\n","# Spliting the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Normalizing the features using StandardScaler\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Linear Regression\n","lr_model = LinearRegression()\n","lr_model.fit(X_train_scaled, y_train)\n","lr_predictions = lr_model.predict(X_test_scaled)\n","\n","# Decision Tree Regressor\n","dt_model = DecisionTreeRegressor(random_state=42)\n","dt_model.fit(X_train_scaled, y_train)\n","dt_predictions = dt_model.predict(X_test_scaled)\n","\n","# Random Forest Regressor\n","rf_model = RandomForestRegressor(random_state=42, n_estimators=100)\n","rf_model.fit(X_train_scaled, y_train)\n","rf_predictions = rf_model.predict(X_test_scaled)\n","\n","# XGBoost Regressor\n","xgb_model = XGBRegressor(random_state=42, n_estimators=100)\n","xgb_model.fit(X_train_scaled, y_train)\n","xgb_predictions = xgb_model.predict(X_test_scaled)\n","\n","# Evaluate models\n","models = {\n","    \"Linear Regression\": lr_predictions,\n","    \"Decision Tree\": dt_predictions,\n","    \"Random Forest\": rf_predictions,\n","    \"XGBoost\": xgb_predictions\n","}\n","\n","for name, predictions in models.items():\n","    print(f\"{name} Mean Squared Error: {mean_squared_error(y_test, predictions)}\")\n","    print(f\"{name} R^2 Score: {r2_score(y_test, predictions)}\")\n"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2-rU-Ub_k4zp","executionInfo":{"status":"ok","timestamp":1726033043863,"user_tz":-330,"elapsed":6558,"user":{"displayName":"Divya Adi","userId":"11657312384525471695"}},"outputId":"6a1318a1-4ea0-43de-aa31-870ff1bd4659"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    type  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","0  white            7.0              0.27         0.36            20.7   \n","1  white            6.3              0.30         0.34             1.6   \n","2  white            8.1              0.28         0.40             6.9   \n","3  white            7.2              0.23         0.32             8.5   \n","4  white            7.2              0.23         0.32             8.5   \n","\n","   chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","0      0.045                 45.0                 170.0   1.0010  3.00   \n","1      0.049                 14.0                 132.0   0.9940  3.30   \n","2      0.050                 30.0                  97.0   0.9951  3.26   \n","3      0.058                 47.0                 186.0   0.9956  3.19   \n","4      0.058                 47.0                 186.0   0.9956  3.19   \n","\n","   sulphates  alcohol  quality  \n","0       0.45      8.8        6  \n","1       0.49      9.5        6  \n","2       0.44     10.1        6  \n","3       0.40      9.9        6  \n","4       0.40      9.9        6  \n","type                     0\n","fixed acidity           10\n","volatile acidity         8\n","citric acid              3\n","residual sugar           2\n","chlorides                2\n","free sulfur dioxide      0\n","total sulfur dioxide     0\n","density                  0\n","pH                       9\n","sulphates                4\n","alcohol                  0\n","quality                  0\n","dtype: int64\n","Linear Regression Mean Squared Error: 0.4712195956114503\n","Linear Regression R^2 Score: 0.3407666680325335\n","Decision Tree Mean Squared Error: 0.6584615384615384\n","Decision Tree R^2 Score: 0.07881633528171517\n","Random Forest Mean Squared Error: 0.3180976153846154\n","Random Forest R^2 Score: 0.5549833817738414\n","XGBoost Mean Squared Error: 0.36174326776883015\n","XGBoost R^2 Score: 0.49392338105420985\n"]}]}]}